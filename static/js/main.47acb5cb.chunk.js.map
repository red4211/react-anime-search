{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["List","props","listPanels","mediaList","map","elem","index","completedStyle","backgroundImage","coverImage","large","color","genres","key","href","className","style","title","english","format","averageScore","description","onClick","showPrev","showNext","Search","onSubmit","runSearch","type","placeholder","onChange","setSearch","value","searchString","TypeFilter","animeActive","mediaType","mangaActive","name","setType","Filters","changeSortBy","changeSeason","App","e","setState","season","target","searchTerm","state","filterMethod","filterBy","sq2","seas2","query","options","method","headers","body","JSON","stringify","variables","searchQuery","mType","fetch","then","response","json","pageInfo","data","Page","media","event","getAttribute","hasNextPage","nextPage","currentPage","prevPage","preventDefault","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47acb5cb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      pageInfo:{currentPage: 1},\n      mediaList: [],\n      searchString: \"\",\n      mediaType: \"ANIME\",\n      filterBy: \"POPULARITY_DESC\",\n      season:\"\"\n    }\n  }\n\nchangeSeason = (e)=>{\n  this.setState({season:e.target.value}, ()=>{\nconst searchTerm = this.state.searchString;\nconst filterMethod = this.state.filterBy;\nconst season = this.state.season;\nconst type = this.state.mediaType;\n\nlet sq = searchTerm===\"\"? \"\":\"$searchQuery:String,\";\nlet sq2 = searchTerm===\"\"? \"\":\"search: $searchQuery,\";\n\nlet seas1 = season===\"\" ? \"\" : \"$season:MediaSeason,\";\nlet seas2 = season===\"\" ? \"\" : \"season: $season,\";\n\nvar query = `query RunSearch(${sq+seas1} $mType: MediaType, $filterMethod:[MediaSort] ){\n  Page(perPage:10, page: 1){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(${sq2+seas2} type: $mType, sort:$filterMethod){\n    title{\n    english\n  }\n    format,\n    description(asHtml:false),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}`;\n\nvar options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: query,\n        variables: {\n          searchQuery: searchTerm,\n          mType: type,\n          filterMethod:filterMethod,\n          season:season\n        }\n    })\n};\n\n  fetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\n    this.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })    \n  })\n}\n\nchangeSortBy = (e)=>{\n  this.setState({filterBy: e.target.value}, ()=>{\nconst searchTerm = this.state.searchString;\nconst filterMethod = this.state.filterBy;\nconst season = this.state.season;\nconst type = this.state.mediaType;\n\nlet sq = searchTerm===\"\"? \"\":\"$searchQuery:String,\";\nlet sq2 = searchTerm===\"\"? \"\":\"search: $searchQuery,\";\n\nlet seas1 = season===\"\" ? \"\" : \"$season:MediaSeason,\";\nlet seas2 = season===\"\" ? \"\" : \"season: $season,\";\n\nvar query = `query RunSearch(${sq+seas1} $mType: MediaType, $filterMethod:[MediaSort] ){\n  Page(perPage:10, page: 1){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(${sq2+seas2} type: $mType, sort:$filterMethod){\n    title{\n    english\n  }\n    format,\n    description(asHtml:false),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}`;\n\nvar options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: query,\n        variables: {\n          searchQuery: searchTerm,\n          mType: type,\n          filterMethod:filterMethod,\n          season:season\n        }\n    })\n};\n\n  fetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\n    this.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })\n  });\n\n}/*end changeSortBy*/\n\nsetType = (event)=>{\n  const name = event.target.getAttribute('name');\n  this.setState({mediaType: name}, ()=>{\nconst searchTerm = this.state.searchString;\nconst filterMethod = this.state.filterBy;\nconst season = this.state.season;\nconst type = this.state.mediaType;\n\nlet sq = searchTerm===\"\"? \"\":\"$searchQuery:String,\";\nlet sq2 = searchTerm===\"\"? \"\":\"search: $searchQuery,\";\n\nlet seas1 = season===\"\" ? \"\" : \"$season:MediaSeason,\";\nlet seas2 = season===\"\" ? \"\" : \"season: $season,\";\n\nvar query = `query RunSearch(${sq+seas1} $mType: MediaType, $filterMethod:[MediaSort] ){\n  Page(perPage:10, page: 1){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(${sq2+seas2} type: $mType, sort:$filterMethod){\n    title{\n    english\n  }\n    format,\n    description(asHtml:false),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}`;\n\nvar options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: query,\n        variables: {\n          searchQuery: searchTerm,\n          mType: type,\n          filterMethod:filterMethod,\n          season:season\n        }\n    })\n};\n\n  fetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\n    this.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })\n  });\n}/* end settype*/\n\ncomponentDidMount(){\nconst searchTerm = this.state.searchString;\nconst filterMethod = this.state.filterBy;\nconst season = this.state.season;\nconst type = this.state.mediaType;\n\nlet sq = searchTerm===\"\"? \"\":\"$searchQuery:String,\";\nlet sq2 = searchTerm===\"\"? \"\":\"search: $searchQuery,\";\n\nlet seas1 = season===\"\" ? \"\" : \"$season:MediaSeason,\";\nlet seas2 = season===\"\" ? \"\" : \"season: $season,\";\n\nvar query = `query RunSearch(${sq+seas1} $mType: MediaType, $filterMethod:[MediaSort] ){\n  Page(perPage:10, page: 1){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(${sq2+seas2} type: $mType, sort:$filterMethod){\n    title{\n    english\n  }\n    format,\n    description(asHtml:false),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}`;\n\nvar options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: query,\n        variables: {\n          searchQuery: searchTerm,\n          mType: type,\n          filterMethod:filterMethod,\n          season:season\n        }\n    })\n};\n\nfetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\nthis.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })\n}\n\nshowNext = ()=>{\n  if(this.state.pageInfo.hasNextPage===true){\nconst nextPage = this.state.pageInfo.currentPage + 1;\nconst searchTerm = this.state.searchString;\nconst filterMethod = this.state.filterBy;\nconst season = this.state.season;\nconst type = this.state.mediaType;\n\nlet sq = searchTerm===\"\"? \"\":\"$searchQuery:String,\";\nlet sq2 = searchTerm===\"\"? \"\":\"search: $searchQuery,\";\n\nlet seas1 = season===\"\" ? \"\" : \"$season:MediaSeason,\";\nlet seas2 = season===\"\" ? \"\" : \"season: $season,\";\n\nvar query = `query RunSearch(${sq+seas1} $mType: MediaType, $filterMethod:[MediaSort], $nextPage:Int){\n  Page(perPage:10, page: $nextPage){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(${sq2+seas2} type: $mType, sort:$filterMethod){\n    title{\n    english\n  }\n    format,\n    description(asHtml:false),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}`;\n\nvar options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: query,\n        variables: {\n          searchQuery: searchTerm,\n          mType: type,\n          filterMethod:filterMethod,\n          season:season,\n          nextPage:nextPage\n        }\n    })\n};\n\nfetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\nthis.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })\n  }\n}\n\nshowPrev = ()=>{\n  if(this.state.pageInfo.currentPage!==1){\nconst prevPage = this.state.pageInfo.currentPage - 1;\nconst searchTerm = this.state.searchString;\nconst filterMethod = this.state.filterBy;\nconst season = this.state.season;\nconst type = this.state.mediaType;\n\nlet sq = searchTerm===\"\"? \"\":\"$searchQuery:String,\";\nlet sq2 = searchTerm===\"\"? \"\":\"search: $searchQuery,\";\n\nlet seas1 = season===\"\" ? \"\" : \"$season:MediaSeason,\";\nlet seas2 = season===\"\" ? \"\" : \"season: $season,\";\n\nvar query = `query RunSearch(${sq+seas1} $mType: MediaType, $filterMethod:[MediaSort], $prevPage:Int){\n  Page(perPage:10, page: $prevPage){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(${sq2+seas2} type: $mType, sort:$filterMethod){\n    title{\n    english\n  }\n    format,\n    description(asHtml:false),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}`;\n\nvar options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: query,\n        variables: {\n          searchQuery: searchTerm,\n          mType: type,\n          filterMethod:filterMethod,\n          season:season,\n          prevPage:prevPage\n        }\n    })\n};\n\nfetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\nthis.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })    \n  }\n}\n\nsetSearch = (e)=>{\n  this.setState({searchString: e.target.value})\n}\n\nrunSearch = (e)=>{\n  e.preventDefault();\nconst searchTerm = this.state.searchString;\nconst filterMethod = this.state.filterBy;\nconst season = this.state.season;\nconst type = this.state.mediaType;\n//search query and season are optional\nlet sq = searchTerm===\"\"? \"\":\"$searchQuery:String,\";\nlet sq2 = searchTerm===\"\"? \"\":\"search: $searchQuery,\";\n\nlet seas1 = season===\"\" ? \"\" : \"$season:MediaSeason,\";\nlet seas2 = season===\"\" ? \"\" : \"season: $season,\";\n\nvar query = `query RunSearch(${sq+seas1} $mType: MediaType, $filterMethod:[MediaSort] ){\n  Page(perPage:10, page: 1){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(${sq2+seas2} type: $mType, sort:$filterMethod){\n    title{\n    english\n  }\n    format,\n    description(asHtml:false),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}`;\n\nvar options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    },\n    body: JSON.stringify({\n        query: query,\n        variables: {\n          searchQuery: searchTerm,\n          mType: type,\n          filterMethod:filterMethod,\n          season:season\n        }\n    })\n};\n\nfetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\nthis.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })\n}/*end runsearch*/\n\n  render(){\n    return (\n    <div className=\"App\">\n      <aside>\n        <Search setSearch={this.setSearch} searchString={this.state.searchString} runSearch={this.runSearch} />\n        <TypeFilter setType={this.setType} mediaType={this.state.mediaType}/>\n        <Filters changeSortBy={this.changeSortBy} changeSeason={this.changeSeason}/>\n      </aside>\n      <List mediaList={this.state.mediaList} showNext={this.showNext} showPrev={this.showPrev} />\n    </div>\n  );\n  }\n}\n\nfunction List(props){\n  const listPanels = props.mediaList.map((elem,index)=>{\n  const completedStyle = {\n    backgroundImage:\"url(\"+elem.coverImage.large+\")\",\n    color: \"#cdcdcd\"\n  }\n\n  const genres = elem.genres.map((elem,index)=>{\n    return <li key={index}>{elem}</li>\n  })\n    return (<li key={index} >\n      <a href=\"#\" className=\"cover-img\" style={completedStyle} >\n      </a>\n      <div className=\"card-container\">\n        <p className=\"card-title\" >{elem.title.english}</p>\n        <div className=\"card-info-1\" >\n          <div>{elem.format}</div>\n      <div>{elem.averageScore + '%'}</div>\n        </div>\n      <div className=\"desc\">{elem.description}</div>\n      <ul className=\"genres-list\">{genres}</ul>\n      </div>\n    </li>)\n  })\n\n  return(\n    <div className=\"main\">\n      <div className=\"btn-container\">\n      <button onClick={props.showPrev} className=\"btn-1\">Back</button>\n      <button onClick={props.showNext} className=\"btn-1\">Next</button> \n      </div>\n      <ul className=\"list\">{listPanels}</ul>\n    </div>\n    )\n}\n\nList.propTypes = {\n  mediaList: PropTypes.array,\n  showNext: PropTypes.func,\n  showPrev: PropTypes.func\n}\n\nfunction Search(props){\n  return <form onSubmit={props.runSearch} ><input type=\"text\" placeholder=\"search\" onChange={props.setSearch} value={props.searchString} className=\"search-field\"></input></form>\n}\n\nSearch.propTypes = {\n  setSearch: PropTypes.func,\n  searchString: PropTypes.string,\n  runSearch: PropTypes.func\n}\n\nfunction TypeFilter(props){\n  var animeActive = props.mediaType===\"ANIME\"?\"active\":\"\";\n  var mangaActive = props.mediaType===\"MANGA\"?\"active\":\"\";\n  return(\n      <div>\n        <p className=\"card-title\">Type</p>\n      <ul className=\"type-filter\">\n        <li name=\"ANIME\" onClick={props.setType} className={animeActive}>Anime</li>\n        <li name=\"MANGA\" onClick={props.setType} className={mangaActive}>Manga</li>\n      </ul>\n      </div>\n    )\n}\n\nTypeFilter.propTypes = {\n  setType: PropTypes.func\n}\n\nfunction Filters(props){\n  return(\n      <div>\n        <p className=\"card-title\">Filters</p>\n      <select onChange={props.changeSortBy} >\n      <option value=\"POPULARITY_DESC\" >Popularity</option>\n        <option value=\"TITLE_ENGLISH\" >Title</option>\n        <option value=\"SCORE_DESC\">Score</option>\n        <option value=\"SEARCH_MATCH\">Search match</option>\n      </select>\n\n      <p className=\"card-title\">Season</p>\n      <select onChange={props.changeSeason} >\n        <option value=\"\" >All</option>\n        <option value=\"WINTER\">Winter</option>\n        <option value=\"SPRING\">Spring</option>\n        <option value=\"SUMMER\">Summer</option>\n        <option value=\"FALL\">Fall</option>\n      </select>\n      </div>\n    )\n}\n\nFilters.propTypes = {\n  changeSortBy: PropTypes.func,\n  changeSeason: PropTypes.func\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}