{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["List","props","listPanels","mediaList","map","elem","index","completedStyle","backgroundImage","coverImage","large","color","key","href","className","style","title","english","format","averageScore","description","onClick","showPrev","showNext","Search","onSubmit","runSearch","type","placeholder","onChange","setSearch","value","searchString","App","nextPage","state","pageInfo","currentPage","query","options","method","headers","body","JSON","stringify","hasNextPage","fetch","then","response","json","setState","data","Page","media","prevPage","e","target","preventDefault","searchQuery","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7eeeb2f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      pageInfo:{currentPage: 1},\n      mediaList: [],\n      searchString: \"\"\n    }\n  }\n\ncomponentDidMount(){\nvar query = `query ShowPopular{\n  Page(perPage:10, page: 1){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(type:ANIME, season:SUMMER, seasonYear:2019, popularity_greater:6000){\n    title{\n    english\n  }\n    format,\n    description(asHtml:true),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}\n`;\n\n    var options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n            query: query\n        })\n    };\n\n\n  fetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\n    this.setState({\n      pageInfo: response.data.Page.pageInfo,\n      mediaList: response.data.Page.media \n    })\n  })\n}\n\nshowNext = ()=>{\nconst nextPage = this.state.pageInfo.currentPage + 1;\nvar query = `query ShowPopular{\n  Page(perPage:10, page: ${nextPage}){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(type:ANIME, season:SUMMER, seasonYear:2019, popularity_greater:6000){\n    title{\n    english\n  }\n    format,\n    description(asHtml:true),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}\n`;\n\n    var options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n            query: query\n        })\n    };\n\n  if(this.state.pageInfo.hasNextPage === true){\n  fetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\n  this.setState({\n  pageInfo: response.data.Page.pageInfo,\n  mediaList: response.data.Page.media \n  })\n  })\n  }\n}\n\nshowPrev = ()=>{\n  if(this.state.pageInfo.currentPage!==1){\nconst prevPage = this.state.pageInfo.currentPage - 1;\nvar query = `query ShowPopular{\n  Page(perPage:10, page: ${prevPage}){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(type:ANIME, season:SUMMER, seasonYear:2019, popularity_greater:6000){\n    title{\n    english\n  }\n    format,\n    description(asHtml:true),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}\n`;\n\n    var options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n            query: query\n        })\n    };/*end*/\n\n  fetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\n  this.setState({\n  pageInfo: response.data.Page.pageInfo,\n  mediaList: response.data.Page.media \n  })\n  })\n  }\n}\n\nsetSearch = (e)=>{\n  this.setState({searchString: e.target.value})\n}\n\nrunSearch = (e)=>{\n  e.preventDefault();\nconst searchQuery = this.state.searchString;\n\nvar query = `query Search{\n  Page(perPage:10, page: 1){\n    pageInfo {\n      total\n      currentPage\n      lastPage\n      hasNextPage\n      perPage\n    }\n    \n    media(type:ANIME, search: ${searchQuery} ){\n    title{\n    english\n  }\n    format,\n    description(asHtml:true),\n    averageScore,\n    studios(isMain:true) {\n      nodes {\n        name\n      }\n    },\n    coverImage {\n      large\n      color\n    },\n    genres\n  }\n  }\n  \n}\n`;\n\n    var options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n            query: query\n        })\n    };\n\nfetch('https://graphql.anilist.co', options)\n  .then(response => response.json())\n  .then(response => {\n    console.log(response);\n  })\n}/*end runsearch*/\n\n\n  render(){\n    return (\n    <div className=\"App\">\n      <aside>\n        <Search setSearch={this.setSearch} searchString={this.state.searchString} runSearch={this.runSearch} />\n      </aside>\n      <List mediaList={this.state.mediaList} showNext={this.showNext} showPrev={this.showPrev} />\n    </div>\n  );\n  }\n}\n\nfunction List(props){\n  const listPanels = props.mediaList.map((elem,index)=>{\n  const completedStyle = {\n    backgroundImage:\"url(\"+elem.coverImage.large+\")\",\n    color: \"#cdcdcd\"\n  }\n    return (<li key={index} >\n      <a href=\"#\" className=\"cover-img\" style={completedStyle} >\n      </a>\n      <div className=\"card-container\">\n        <p className=\"card-title\" >{elem.title.english}</p>\n        <div className=\"card-info-1\" >\n          <div>{elem.format}</div>\n      <div>{elem.averageScore}</div>\n        </div>\n      <div className=\"desc\">{elem.description}</div>\n      </div>\n    </li>)\n  })\n\n  return(\n    <div className=\"main\">\n      <button onClick={props.showPrev} className=\"btn-1\">Prev</button>\n      <button onClick={props.showNext} className=\"btn-1\">Next</button>\n      <ul className=\"list\">{listPanels}</ul>\n    </div>\n    )\n}\n\nList.propTypes = {\n  mediaList: PropTypes.array,\n  showNext: PropTypes.func,\n  showPrev: PropTypes.func\n}\n\nfunction Search(props){\n  return <form onSubmit={props.runSearch} ><input type=\"text\" placeholder=\"search\" onChange={props.setSearch} value={props.searchString} ></input></form>\n}\n\nSearch.propTypes = {\n  setSearch: PropTypes.func,\n  searchString: PropTypes.string,\n  runSearch: PropTypes.func\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}